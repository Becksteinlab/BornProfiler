# BornProfiler run input file
# This is an example (generated with apbs-bornprofile-mplaceion.py --template),
# edited, and commented.
#
# You can use this file directly or generate one appropriate for the current
# version of BornProfiler with the command
#   apbs-bornprofile-mplaceion.py --template runinput.cfg
# and edit it.

# The file format is a so-called ini-style file. The most important rules for 
# the syntax of this file:
# 1) Section headers are enclosed in brackets '[' and ']'
# 2) key/value pairs are stored for each section; anything after the '=' sign
#    is the value (with the exception of leading and trailing white space)
# 3) comments begin with '#' 
# 4) Values can be used in other values using '%(key)s' but
#    - only keys stored in the [DEFAULT] section can be used everywhere
#    - keys in other sections are only available in their own section
# 5) You can add your own keys if this is convenient.
# 6) Your global cfg file ~/.bornprofiler.cfg is always read before
#    the run cfg file and values from that file can also be used.
#    Values in *this* file take precedence over values from the global 
#    configuration file.
# 7) The order of keys within a section does not matter.

[DEFAULT]
# The default section contains keys that are specific to this run but are used
# in subsections. You can also define additional keys here to simplify
# management of collections of cfg files. Note that you can refer to DEFAULT
# keys anywhere else, too.

basedir = .
# full path to the directory under which all files will be generated; it should
# be a fully rooted path and '.' is put here only as an example. When run input
# cfg file is generated with ``apbs-bornprofile-mplaceion.py --template`` the
# the basedir is automatically set.

solvent_dielectric = 80
# The dielectric of the solvent; this is set here because we use the same value
# in two sections below as the value for sdie and cdie. This is an example for
# how one can make the input file more consistent by defining a few variables
# in the DEFAULT section and then using those further down.

[executables]
# paths to executables (typically taken from ~/.bornprofiler.cfg) or just the
# names if the shell can find them on the PATH These paths are used when the
# apbs-*.py scripts are run. On a cluster, these paths are set in the job
# scripts (e.g. by using environment variables APBS and DRAW_MEMBRANE2A).

###apbs = apbs
# The APBS exceutable (needs to be installed separately, see
# http://www.poisson-boltzmann.org)

###drawmembrane = draw_membrane2a
# The draw_membrane2a executable; see INSTALL in the BornProfiler package.

###apbs_has_zlib = True
# APBS may be compiled without zlib support (--disable-zlib) and thus not be
# able to read/write gz compressed files. If this is the case, set this variable
# to False. However, you should really consider installing a version of APBS
# that supports compression because the disk space savings will be large.
# See also https://github.com/Becksteinlab/BornProfiler/issues/7

###apbs_always_read_dxgz = False
# APBS 1.3 'READ gz' is broken and cannot read gzipped dx files. If you want to
# test a potentially fixed version of APBS then you can set this keyword to
# 'True'.  The safest option is to keep it set to 'False' or commented out.


[environment]
#------------------------------------------------------------
# Protein and solvent
#------------------------------------------------------------
# This section collects data on the whole system that are
# used for all kinds of electrostatic calculations, including
# calculations of the potential with a membrane or Born 
# profiles.

pqr = protein.pqr
# file name of the PQR file of the protein channel or pore

pdie = 10
# dielectric constant of the protein

temperature = 298.15
# temperature in Kelvin at which the calculation is performed.

conc = 0.1
# ionic strength of the NaCl bath, in mol/l

sdie = %(solvent_dielectric)s
# dielectric constant of the solvent (typically 80 for water)

runtype = with_protein
# This flag tells the scripts if there is an actual protein present in
# the calculation ('with_protein') that contains at least a single
# atom with a non-zero charge or if one is only looking at a substrate
# in a dielectric environment ('memonly'). 
# See ``examples/2BG9`` for and example for 'with_protein' and
# ``examples/Parsegian`` for an example with 'memonly'.
#
# Most people will leave this at 'with_protein'.


[job]
#------------------------------------------------------------
# Queuing system
#------------------------------------------------------------
# The job section is concerned with generating bash shell scripts that
# do all the hard work for a single calculation (i.e. one position of
# an ion), and scripts for queuing systems that automate running a
# large number of these calculations on a cluster.

# This section needs to be adapted by the user to their own
# computational environment. In many cases the job section can be put
# into the global configuration file ~/.bornprofiler.cfg.
#------------------------------------------------------------

script = q_local.sh
# Template for a script that runs a single Born
# calculation. BornProfiler comes with a number of pre-defined scripts
# and q_local.sh should generally work.
#
# You can modify the script and save it under a different name in
# ~/.bornprofiler/qscripts and then change the script keyword to the
# name of the saved script.

arrayscript = q_array.sge
# Template for queuing system submission script that submits all
# scripts in one go (typically using the array facility of the queuing
# system). This is very much system dependent so a user (perhaps
# together with a system administrator) will have to adapt one of the
# example scripts for their local cluster. Save the changed script
# under a new name in ~/.bornprofiler/qscripts and put this name here.


name = mbornprofile
# name of the job that will be displayed in the queuing system


[potential]
#------------------------------------------------------------
# Section used by apbs-mem-potential.py
#------------------------------------------------------------

glen = (200,200,200)
# Length of the bounding box in Angstroems; see APBS documentation
# http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/glen

dime = (97,97,97)
# Size of the computational grid.
# http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/dime


[membrane]
#------------------------------------------------------------
# Section used by apbs-bornprofile-mplaceion.py and apbs-mem-potential.py
#------------------------------------------------------------

# Membrane
# --------

mdie = 2
# membrane dielectric

lmem = 40
# total thickness of the membrane (including headgroups = 2*headgroup_l); the
# thickness of the hydrophobic core is hence lmem - 2*headgroup_l

zmem = 0
# lower z-boundary of the membrane, in the same coordinate system as the
# protein; for instance, look at http://sbcb.bioch.ox.ac.uk/cgdb/ for the
# position of the bilayer, then select a residue at the bottom of the membrane
# in your input structure and use the z coordinate as zmem.
# (The whole system is centred on molecule 1 = protein and the coordinate
# system for the calculation is taken from molecule 1.)

headgroup_l = 0
# Thickness of single headgroup layer, in Angstroem. If set to 0
# then no headgroups are included.
# Headgroups are taken into account as two layers with dielectric
# headgroup_die between the hydrophobic core of the membrane and the
# solvent.

headgroup_die = 20
# headgroup dielectric

# Exclusion zone
# --------------

# For water-filled pores one has to define a conical exclusion zone
# that contains the pore and intersects with the protein. The
# draw_membrane2a tool will ensure that only pore is set to a solvent
# dielectric. Typically it requires some trial and error to get this
# right. Look at dielxSm.dx as a density and check that there is a
# pore with solvent dielectric visible.
#
# The pore is centered on the protein and its axis is parallel to the
# z-axis.
#
# Setting both rbot and rtop to 0 disables this feature.

rbot = 0
# radius at the bottom of the membrane (Angstroem)

rtop = 0
# radius at the top of the membrane (Angstroem)

x0_R = None
# absolute x position of the exclusion zone centre, in the coordinate
# frame of the protein; if set to None then BornProfiler sets it to the
# centre of the protein

dx_R = 0
# shift centre of the exclusion zone relative to x0_R, in Angstroem
# (typically used with x0_R = None)

y0_R = None
# absolute y position of the exclusion zone centre, in the coordinate
# frame of the protein; if set to None then BornProfiler sets it to the
# centre of the protein

dy_R = 0
# shift centre of the exclusion zone relative to y0_R, in Angstroem
# (typically used with y0_R = None)

cdie = %(solvent_dielectric)s
# dielectric inside the pore; you have the freedom to set it to a value less
# than the bulk value if you have any indication that this makes sense.


# External potential
# ------------------

vmem = 0
# linear transmembrane potential in kT/e [subject to change, will probably be made mV!!]
# UNTESTED


[bornprofile]
#------------------------------------------------------------
# Section used by apbs-bornprofile-mplaceion.py and apbs-bornprofile-placeion.py
#------------------------------------------------------------

points = points.dat
# file name that contains the list of points at which the electrostatic free
# energy of the ion is to be calculated; format is one x y z triplet (in
# Angstroem) per line or a PDB file or a HOLE sph file.

ion = Na
# name of the ion; see templates/bornion.dat for all Rashin&Honig ions
# e.g. Cl, K, ...
#
# The "Born radii" for ions were taken from Table III in
#
#   Alexander A. Rashin, Barry Honig (1985) J. Phys. Chem. 89(26):5588-5593
#   http://dx.doi.org/10.1021/j100272a006
#
# This paper suggests using the corrected covalent radius (Born radius)
# and not the Pauling radius.
#
# Born radii for H3O+, OH- (and H+... for testing) have been derived
# from the solvation free energies in
#
#   J.R. Pliego and J.M. Riveros. Chemical Physics Letters, 332(5-6): 597--602,
#   2000.  http://dx.doi.org/10.1016/S0009-2614(00)01305-1.
#
# directly via the Born equation. USE AT YOUR OWN RISK!!



dime = [(129,129,129),(129,129,129),(129,129,129)]
# Dimensions of the computational grid for three focusing levels. The
# proportions should be the same as for glen (below). Note that APBS only
# allows certain values for grid dimensions (see the docs). If automatic
# focusing is used, then only the first one is used.  This has to be in the
# format of a Python list of lists.
# http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/dime


glen = [(250,250,250),(100,100,100),(50,50,50)]
# System sizes (Angstroem) for three focusing levels. The first level should be
# large enough to contain the protein and every ion position.  If automatic
# focusing is used, then only the first one is used.  This has to be in the
# format of a Python list of lists.
# http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/glen


fglen = (40,40,40)
# Size of the fine grid in Angstroem (for auto-focusing, only used by
# apbs-bornprofile-placeion.py)
# http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/fglen


