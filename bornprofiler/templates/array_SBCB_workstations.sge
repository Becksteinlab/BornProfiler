#$ -N BP%(jobName)s
#$ -S /bin/bash
#$ -l mem_free=1024M,mem_total=1024M
#$ -cwd
#$ -j y
#$ -r y
#$ -t 1-%(numJobs)d

# :Queing System: SGE
# :Host: SBCB Workstations
# :URL: https://sbcb.bioch.ox.ac.uk/wiki/index.php/Sun_Grid_Engine_6.2_on_local_workstations#Platform_specific_binaries

# This file is interpolated by Python (i.e. anything with 
# a single or double percentage sign ('%%') will be expanded. See
# http://docs.python.org/library/stdtypes.html#string-formatting-operations
# Tip: Do not add or delete percentage signs unless you know 
#      exactly what you are doing.

# *********** WARNING **********
# WILL NOT RUN FOR YOU AS IT IS
# *********** WARNING **********
#
# Modify the 'Prepare Binaries' section below to reflect
# your own setup. Do the following:
# 1) copy the file to ~/.bornprofiler/qscripts
# 2) edit your local copy --- it will take precedence over the
#    copy of the file in the package (or rename it and give the
#    new name in the input parameter file)

# ===================
# Prepare binaries
# ===================
# Set platform and architecture
ARCH=$($HOME/bin/config.guess)
BIN=$HOME/Library/$ARCH/bin

echo "Running on: $HOSTNAME ($ARCH)"

# random delay of 0..MAXDELAY s to avoid nfs storms
: ${MAXDELAY:=240}
delay=$(($RANDOM*${MAXDELAY}/32767))
echo    "Array job number <job>${JOB_ID}.${SGE_TASK_ID}</job> on <host>${HOSTNAME}</host>:"
echo -n "Waiting for ${delay} seconds before accessing a nfs disk..."
sleep ${delay}
echo "done"


# Load modules based on platform and architecture
# see https://sbcb.bioch.ox.ac.uk/wiki/index.php/User:Oliver/Compilopedia/APBS
case "$ARCH" in
i686-pc-linux-gnu)
        # Intel 10.1 compilers with -static-intel: no need for other libs
        ;; 
x86_64-*-linux-gnu)
	# Intel 9.1 compilers with -i-static
	;;
i386-apple-darwin9.*)
        . /sbcb/packages/modules/init
        module load gcc/4.4.1/32 gfortran/4.4.1/32
        ;;
i386-apple-darwin10.*)        
        . /sbcb/packages/modules/init
        module load gcc/4.6.0/64 gfortran/4.6.0/64
        ;;
*)
        echo "Unknown platform and architecture."
        exit 1
;;
esac

# environment variables are used in the downstream scripts to set executables
export APBS=$BIN/apbs
export DRAW_MEMBRANE2A=$BIN/draw_membrane2a


declare -a job

#------------------------------------------------------------
%(jobArray)s 
#------------------------------------------------------------

run_d=$(dirname ${job[${SGE_TASK_ID}]})
script=$(basename ${job[${SGE_TASK_ID}]})
 
cd ${run_d} || { echo "Failed to cd ${run_d}. Abort."; exit 1; }
. ./${script}
